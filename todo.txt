arie:
first file we have:
<!--<p>Ā A2 A4 Ã Ä A9 B1 B2 B9 C1 C3 C4 C6 D1 Ḍ D4 D5 D6 E1 E2 E4 E5 Ë F1 G6 H2 Ī I2 I4 Ï K1 K2 K6
Ḷ L6 M3 M7 Ṇ Ṅ Ñ N6 O1 O4 Õ P1 Q4 Ṛ R6 S1 Ṣ Ś S6 Ṭ T6 Ū U5 Ü V6 ā a2 a3 a4 ã a6 ä c1
ḍ d6 e0 ē e4 e5 ë g6 h2 h6 ī i2 i4 i5 ï i9 k2 ḵ l1 ḷ ḻ ṃ ṁ m6 n1 ṇ ṅ n4 ñ ṉ n7 o0 ō
o3 o4 õ o6 ö o8 o9 p2 p6 ṛ r3 ṟ r7 ṣ s3 ś s6 ṭ t6 t8 ū u2 u3 u4 u5 u6 ü u8 v2 v3 v4 v7 x3
x4 x7 y3 z2 z6</p>-->
look how evolved and also see if we sth similar in second file.



== xpath dispatching

make this less stupid. could cache the result of absolute locations search in
the tree itself. more generally, could save the result of a relative search
on the node it is called on.

in node.find(xpath) allow
  //div[@type='edition']
maybe just borrow the code from xml.etree? no, it's C code.



====

convention: display siglum instead of bib ref when there is a lone
<ptr target="bib:xxxxxx"/> under //app/notes
for this to work, need to implement xpath dispatching in parse.py
idem for https://github.com/erc-dharma/project-documentation/issues/272#issuecomment-2028717827

pour languages dans display, tous ceux de div type=edition + écrfiture
écritures à gérer
"Tamil in Tamil Script; Sanskrit in Grnatha script":

================ end manu

https://mail.google.com/mail/u/0/popout?ver=1g3ytthb29lwb&cat=Work&qid=D33D63CF-AA8E-482A-B581-217499DB57B8&search=cat&th=%23thread-f%3A1794923140307345636&cvid=3
https://mail.google.com/mail/u/0/popout?ver=1g3ytthb29lwb&cat=Work&qid=D33D63CF-AA8E-482A-B581-217499DB57B8&search=cat&th=%23thread-f%3A1794915809975259102&cvid=1
https://mail.google.com/mail/u/0/popout?ver=1g3ytthb29lwb&cat=Work&qid=D33D63CF-AA8E-482A-B581-217499DB57B8&search=cat&th=%23thread-f%3A1794781717221740805&cvid=2

.pagelike: <pb> + <milestone type="page-like">
  Use a single instruction for representing them, taking into account <fw>
.linelike: <lb>
.gridlike  <milestone type="grid-like">


rm dipled schema, use ins schema for this.

## FS access

in server add stuff to ensure we don't try to access repos/, all accesses to
repos should go through the db. could also run the process without write perms
to repos or sth, but probably not feasible without patching python's binary or
creating users, etc. in fact, we only need access to /views and /static, and we
shouldn't use immediate opens. use:

  fetch_file_from_fs(repo, name)
  fetch_file_from_db(repo, name)

maybe just patch the open func as a primary check to verify that we don't
open files for no reason? not sufficient, plenty of ways we might access the fs.
should have a flag in the File obj

do not reopen the same text file several times, only read it a single time and
do not access the external file once stored in the db, because it might disappear
or be modified by change.py.
look at validate.py and parse_ins, mostly
XXX maybe better to use a dummy file object that is adapted from the db
and contains the file path + the data + maybe other useful stuff; reuse what
we have for File() in validate.py, and put it in texts.py

FILE ABSTRACTION object (copy go stuff)
should have File class + a MemFile that overrides the relevant methods


## Refactoring

open/close read transactions automatically for each server request; won't cost
much and is simpler to maintain.

# https://serverfault.com/questions/636790/nginx-log-complete-request-response-with-all-headers
Should also store a local copy of files we fetch from the web (e.g. the iso 639
data), in a cache, wihtin the dame db. this cache would be written to only by
change.py, when processing files.

XXX we must do NFC normalization at some point; when? not before storing the
file in the db (might need the original later on for e.g. hashing), we can
either do normalization on-the-fly or store a copy of the normalized text in
documents.

shouldn't store separately the app from all the data files, because we need the
data files to be present to do anything with the db. the app code is useless
on its own. add projdoc as a submodule? can we still do a git pull in the app
repo without having git complain that the repo has been modified?
everything should be in the same repo. maybe use a reload command that reloads
data files _but not the code_?

in fact we have 2 build levels: fetch files from the fs, and parse the
documents. should do the minimum whenever possible.


## Validation

Script maturity is for use only with the class "Brahmi and derivatives" (and
its subcategories); for any other script classes it is not optional but
"forbidden". For Brahmi, it is mandatory. Amend rules accordingly.

deal with uniqueness of phys elements:
* pb and pagelike milestones must have unique @n in the whole div/edition

Check for multiple uses of the same bib entry as in https://dharman.in/display/DHARMA_INSBengalCharters00050#bibliography (disallow?)

actually use dharma.rng, only in /texts for now, afterwards distribute it;


## Display

deal with rendition and xml:lang, which must cover the whole text in div type edition.
must be dealt with in tree.py

manu: In physical display, do not display editorial hyphens, but do show them
in logical display. For this to work, need to tag languages. XXX
hyphens between words? or at the end fo a line?

FIX <p><ul></ul></p> not allowed in HTML5, fix that by using a <div> instead of
<p>, or, better pop and reopen <p> elements when needed when compiling
stuff.

manu: grantha translit with button several states translit methods

* fix incorrect verse numbers that should be in Roman in DHARMA_INSCIC00066
  https://dharmalekha.info/texts/DHARMA_INSCIC00066#translation-1

* Sort out languages tagging; assign language categories (lang of
  the ed. or of the rest, main or secondary lang; probably not
  useful to keep track of <foreign>)

add tooltip for expan in <abbr><expan> in phys disp; but need to know how to do
that

div rendition="class:38768 maturity:83213" (grantha) à mettre en gras pas seulement hi rend=grantha ; pour SII0501358
idem pour <lg rendition=...> dans Tiruvavatuturai01

don't think we are formarring abbr/expan as supposed

## Problems with @n.

The repetitive scheme is not clear and unpredictable. Should have a clearer
convention.


## XML display

Put the tab button in the sidebar, call it "view source". Should allow resizing
the sidebar, too. when it is completemy closed, what to display?

* when displaying the sidebar, add toc headings for navigating the xml: header,
  edition, translation, etc.
* Need to have a pretty-print func that preserves space and
  doesn't add unnecessary space.
* Also add line numbers
* Style the thing with a color for comments and tags, maybe different colors
  for milestones and logical elements.
* Add error messages with popups in the XML.


## Website

stop using tables in website, annoying to style and sucks on mobile. use cards
instead. and they should be convertible to tables if we have enough space.

Parse urls and make them clickable.

for https://github.com/erc-dharma/project-documentation/issues/266#issue-2207593274
don't use href in in-page links, it's confusing; use data-href instead; and this
would allow us to distinguish page-internal links from the others.

when a file is completely invalid, show the raw xml in the displqay (not pretty-printed).

update popperjs. read the tuto. figure out how to reprod tooltip functionality.

do a redirect /foo/ -> /foo in nginx _but_ watch out with the /zotero-proxy
stuff.

cumulative timeout for flashing https://developer.mozilla.org/fr/docs/Web/API/setTimeout

Make the top menu sticky on pc? no. Add a button to show/hide the left sidebar (on
pc); where? left of the top menu downward-pointing > thing. The left sidebar
shouldn't pop when we arrive to the page footer, how? The left sidebard should
be resizable, but then dimensions need to be saved as a cookie because reloading
the page will mess up the size.

Generate a site map (wget?).

Use the w3c validator API https://validator.w3.org/docs/api.html with random
urls to detect issues; submit URLs like so:

  https://validator.w3.org/nu/?out=json&doc=$URL

Add a "status" search field to catalog to filter by error status.

add global table of gaiji symbols actually found in inscriptions.
we will add links to inscriptions within this table so that we can find which
inscriptions, etc. contain which symbols.


# Tamil

Should we do the search stuff in Python, go or C? Since we are going to query
the db, might be simpler to have a SQLite extension, but then we must write
at least the binding code in C. For testing, it would be better to have an
interface that accepts commands, separate from sqlite. It's probably best to
do everything through a sqlite extension, even if it's annoying, because this
way we're protected from transaction issues.

Write the main code in go for simplicity. Add a basic argc,argv func as an
entry point, and wrap this function in C with minimum code.


# Parallels

Allow quoting part of the input with "..." to force an exact substring match.
Still keep using the same similarity measure. When there are several quoted
passages, allow overlaps viz. "foo"f"fo" match "foo". Or not? require the
matched strings to occur in the same order? In fact having a second field for
filtering seems better.

This should be linked to the catalog search features, but we must first
integrate with the main db.


## Duplicate file idents and zotero idents

would be convenient to have position-independent files, viz. assume file
basenames are unique AND also extension-independent files to allow people to
move files around.

find some way to report non unique files ; could use an intermediate table
that stores duplicates, like for zotero; for duplicate files in the same repo,
we are sure there is a problem and we can complain early on while processing the
repo itself (to whom, however?); but if the files are in distinct repos, we
cannot tell whether the file is being moved or anything, because there is no
global commit across all repos and the order of operations is not guaranteed.

in any case, we must preserve the fact that a given ident always corresponds to
exactly one elem; so if we have a duplicate ident, do not use this
duplicate ident, instead generate new ones and delete these when appropriate.

## Corpora

ARIE
SII (south indian inscriptions), on attend livraison finale
Epigraphia carnatica

