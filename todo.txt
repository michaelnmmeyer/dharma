update popperjs

== manu

Pallava469 : avoir point dans book display après maison d'édition. biblio
entrée donner les nums de page de l'entrée.

FIX <p><ul></ul></p> not allowed in HTML5, fix that by using a <div> instead of
<p> or better

===



shouldn't store separately the app from all the data files, because we need the
data files to be present to do anything with the db. the app code is useless
on its own. add projdoc as a submodule? can we still do a git pull in the app
repo without having git complain that the repo has been modified?
everything should be in the same repo. maybe use a reload command that reloads
data files _but not the code_?

in fact we have 2 build levels: fetch files from the fs, and parse the
documents. should do the minimum whenever possible.

for now, when processing docs, store both the commit of the app and the commit
of projdoc. but first actually put the schemas + html into projdoc

===

do not reopen the same text file several times, only read it a single time and
do not access the external file once stored in the db, because it might disappear
or be modified by change.py.
look at validate.py and parse_ins, mostly
XXX maybe better to use a dummy file object that is adapted from the db
and contains the file path + the data + maybe other useful stuff; reuse what
we have for File() in validate.py, and put it in texts.py

FILE ABSTRACTION object (copy go stuff)
should have File class + a MemFile that overrides the relevant methods

===

think about decorator to add for logging activity automatically for important
funcs; also might add a timer to these functions, so that we have "starting X"
"X completed in ...".

add a check to each DB function that verifies whether we are in a transaction or
not (except for functions that are marked with the decorator and that use
"begin", "end" "commit", "rollback"). All db calls should be protected by a
transaction.

trigger a rebuild after projdoc is updated _but_ do not reread files,
fetch them from the db instead. we don't need to modify everything, just:

  texts.status (revalidate the file with a quick check)
  documents + documents_index (basically rebuild the whole catalog)

find a way to signal duplicate files and duplicate bib entries and errors in
projdoc.

check that we support invalid texts in catalog; add a dummy repo that contains
sample files for testing; ithoink there is alreadsy onr

actually use dharma.rng, only in /texts for now, afterwards distribute it;

add somewhere a date indicating when we
last updated the validation code (project-doc)

do a redirect /foo/ -> /foo in nginx _but_ watch out with the /zotero-proxy
stuff.

== refs

note invalid local uris with @ref, color in red or sth. but we should resolve
links later on!

§ "Referring to inscriptions in the DHARMABase"
for ref @target, must not use @n and must use normalized urls; propose:

  /corpus/DHARMA_INSSomething
  /repositories/tfd-nusantara-philology
  /participants/argr (= part:argr (participant))

but oxygen suggests for @target all files in the same dir as the one being
edited, must change that as well

=== manu

div rendition="class:38768 maturity:83213" (grantha) à mettre en gras pas seulement hi rend=grantha ; pour SII0501358
idem pour <lg rendition=...> dans Tiruvavatuturai01

think about parallel display of edition & translation

====

fix all XXX | FIXME

cumulative timeout for flashing https://developer.mozilla.org/fr/docs/Web/API/setTimeout

Make the top menu sticky on pc? no. Add a button to show/hide the left sidebar (on
pc); where? left of the top menu downward-pointing > thing. The left sidebar
shouldn't pop when we arrive to the page footer, how? The left sidebard should
be resizable, but then dimensions need to be saved as a cookie because reloading
the page will mess up the size.

Generate a site map (wget?).

Use the w3c validator API https://validator.w3.org/docs/api.html with random
urls to detect issues; submit URLs like so:

  https://validator.w3.org/nu/?out=json&doc=$URL

Check for multiple uses of the same bib entry as in https://dharman.in/display/DHARMA_INSBengalCharters00050#bibliography (disallow?)

Work on parse and find a protocol for correcting files. Would probably be best
to do the parsing and correcting in the same spot, for easier maintenance, but
should not do this on the same tree.

# Names

Don't expand names in documents tables! Because must be automatically
updated after a modif to idListMembers. Should store the dharma id (part:xxxx)
instead, even if we don't find it in idListmembers. When there is none, store
the name directly. Or update everything each time "idListMembers" is modified.

In fact we still need to update the search index, so do a full update. Simplest
is to force a full update each time project-documentation is modified. Language
names too need to be indexed.

Can make a distinction between DHARMA members and others just by looking whether we have a DHARMA id.

Print somewhere which git names we don't have, auto-update it.


===

Merge catalog and texts into a single interface. Need first to add a search
field to filter by error status.

===

add tooltip for expan in <abbr><expan> in phys disp; but need to know how to do
that

merge parse.py and parse_ins.py

===

# Find solution for nesting of phys structure (rel. to phys and log)

manu: <milestone unit="zone">; should be a title, with <lb> as children
ordre des milestones à standardiser et à corriger automatiquement, voir
avec daniel

===

make biblio searchable

  cited:true
  from-editor:
  from-repo:
  ...

allow click to make tips persistent on PC (already automatic on phone) so that
we can select and copy-paste footnotes' contents.

populate aside menu on phone

when flashing entries in the global biblio, the flashed entry is below the bar on mobile.
XXX still so?

Script maturity is for use only with the class "Brahmi and derivatives" (and
its subcategories); for any other script classes it is not optional but
"forbidden". For Brahmi, it is mandatory. Amend rules accordingly.

* fix incorrect verse numbers that should be in Roman in DHARMA_INSCIC00066

* Sort out languages tagging; assign language categories (lang of
  the ed. or of the rest, main or secondary lang; probably not
  useful to keep track of <foreign>)

--------------------------------------------------------- manu



manu: In physical display, do not display editorial hyphens, but do show them
  in logical display. For this to work, need to tag languages. XXX
  hyphens between words? or at the end fo a line?



manu: grantha translit with button several states translit methods

-----------------------------------------------------------

Display remainder of teiheader. What needs to be shown?

/TEI/teiHeader/fileDesc/publicationStmt
   ./pubPlace (ignore the rest)

/TEI/teiHeader/fileDesc/publicationStmt

/TEI/teiHeader/fileDesc/sourceDesc

===========================================================

# Testing

check that the new change.py works
check that zotero syncing works

Must add tests for this, with dummy repos

Also create a few test files for checking display is working

XXX make sure we complain when file names are not unique across all repos


---------------------------------------------------------global


Problems with @n.
* We should restrict the number of containers where numbers should be unique to
just divs and lgs + maybe a special case for p that contains @n + paras
(Andrea). Also need to discuss Andrea's case.
* There should be no distinction of namespace for different types of
milestones.
* The repetitive scheme is not clear and unpredictable. Should have a clearer
convention.

------------------------------------------------------------------

# XML display

Put the tab button somewhere else.

* Need to have a pretty-print func that preserves space and
  doesn't add unnecessary space.
* Also add line numbers
* Style the thing with a color for comments and tags, maybe different colors
  for milestones and logical elements.
* Add error messages with popups in the XML.

------------------------------------------------------------------

stop using tables in website, annoying to style. use cards instead.

for rng: rng2srng-20020831

note that we can link to a span of text on github by adding sth like
#L8C23-L14C34 at the end; but doesn't work with just #L8C23.




Parse urls and make them clickable



# Tamil

Should we do the search stuff in Python, go or C? Since we are going to query
the db, might be simpler to have a SQLite extension, but then we must write
at least the binding code in C. For testing, it would be better to have an
interface that accepts commands, separate from sqlite. It's probably best to
do everything through a sqlite extension, even if it's annoying, because this
way we're protected from transaction issues.

Write the main code in go for simplicity. Add a basic argc,argv func as an
entry point, and wrap this function in C with minimum code.


# Parallels

Allow quoting part of the input with "..." to force an exact substring match.
Still keep using the same similarity measure. When there are several quoted
passages, allow overlaps viz. "foo"f"fo" match "foo". Or not? require the
matched strings to occur in the same order? In fact having a second field for
filtering seems better.

This should be linked to the catalog search features.
